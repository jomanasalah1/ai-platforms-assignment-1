# step 1
import torch
import torch.nn as nn
import seaborn as sns
import matplotlib.pyplot as plt

class SimpleNN(nn.Module):
    def __init__(self):
        super(SimpleNN, self).__init__()
        self.fc1 = nn.Linear(3, 3) 
        self.fc2 = nn.Linear(3, 3) 
        self.fc3 = nn.Linear(3, 3) 
        self.output = nn.Linear(3, 1)  
        
      
        nn.init.uniform_(self.fc1.weight)
        nn.init.uniform_(self.fc1.bias)
        nn.init.uniform_(self.fc2.weight)
        nn.init.uniform_(self.fc2.bias)
        nn.init.uniform_(self.fc3.weight)
        nn.init.uniform_(self.fc3.bias)
        nn.init.uniform_(self.output.weight)
        nn.init.uniform_(self.output.bias)

    def forward(self, x):
        x = torch.sigmoid(self.fc1(x))
        x = torch.sigmoid(self.fc2(x))
        x = torch.sigmoid(self.fc3(x))
        x = torch.tanh(self.output(x))
        return x

model = SimpleNN()
sample_input = torch.rand(1, 3) 
predictions_before_training = model(sample_input)
print("Predictions before training:", predictions_before_training)

predictions_before_training_flat = predictions_before_training.detach().numpy().flatten()

sns.scatterplot(x=[0], y=predictions_before_training_flat, label='Before Training')
plt.title('Network Predictions Before Training')
plt.xlabel('Input')
plt.ylabel('Output')
plt.legend()
plt.show()

# step 2
optimizer = torch.optim.SGD(model.parameters(), lr=0.01)
criterion = nn.MSELoss()
true_output = torch.tensor([[1.0]])  
# step 3
num_epochs = 100
for epoch in range(num_epochs):
   
    optimizer.zero_grad()
    
    predictions = model(sample_input)
    
    loss = criterion(predictions, true_output)
    loss.backward()
    optimizer.step()
    if (epoch + 1) % 10 == 0: 
        print(f'Epoch [{epoch + 1}/{num_epochs}], Loss: {loss.item():.4f}')

# step 4
final_predictions = model(sample_input)
print("Final Predictions after training:", final_predictions)

predictions_before_training_flat = predictions_before_training.detach().numpy().flatten()
final_predictions_flat = final_predictions.detach().numpy().flatten()

plt.figure(figsize=(10, 5))
sns.scatterplot(x=[0], y=predictions_before_training_flat, label='Before Training')
sns.scatterplot(x=[0], y=final_predictions_flat, label='After Training', color='red')
plt.title('Network Predictions Comparison')
plt.xlabel('Input')
plt.ylabel('Output')
plt.legend()
plt.show()
